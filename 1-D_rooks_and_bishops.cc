/* D. Слоны и ладьи
Ограничение времени 	1 секунда
Ограничение памяти 	64Mb
Ввод 	стандартный ввод или input.txt
Вывод 	стандартный вывод или output.txt

Описание:
На шахматной доске стоят слоны и ладьи, необходимо посчитать, сколько клеток не бьется ни одной из фигур.

Шахматная доска имеет размеры 8 на 8. Ладья бьет все клетки горизонтали и вертикали, проходящих через клетку, где она стоит, до первой встретившейся фигуры. Слон бьет все клетки обеих диагоналей, проходящих через клетку, где он стоит, до первой встретившейся фигуры.
Формат ввода

В первых восьми строках ввода описывается шахматная доска. Первые восемь символов каждой из этих строк описывают состояние соответствующей горизонтали: символ B (заглавная латинская буква) означает, что в клетке стоит слон, символ R — ладья, символ * — что клетка пуста. После описания горизонтали в строке могут идти пробелы, однако длина каждой строки не превышает 250 символов. После описания доски в файле могут быть пустые строки.
Формат вывода

Выведите количество пустых клеток, которые не бьются ни одной из фигур.

Примеры:
Ввод
********
********
*R******
********
********
********
********
********
Вывод 49

Ввод
********
********
******B*
********
********
********
********
********
Вывод 54

Ввод
********
*R******
********
*****B**
********
********
********
********
Вывод 40
*/


#include <iostream>
#include <vector>
#include <string>

using namespace std;

int main() {
    vector<string> board(8);
    int attack[8][8] = {0};
    for (int i = 0; i < 8; ++i) {
        getline(cin, board[i]);
    }
    int count = 0;
    for (int i = 0; i < 8; ++i) {
        for (int j = 0; j < 8; ++j) {
            if (board[i][j] == 'R') {
                    for (int k = j + 1; k < 8; ++k) {
                        if (board[i][k] == '*') {
                            attack[i][k] = 1;
                        } else {
                            attack[i][k] = 1;
                            break;
                    }
                }
                for (int k = j - 1; k >= 0; --k) {
                    if (board[i][k] == '*') {
                        attack[i][k] = 1;
                    } else {
                        attack[i][k] = 1;
                        break;
                    }
                }
                for (int k = i - 1; k >= 0; --k) {
                    if (board[k][j] == '*') {
                        attack[k][j] = 1;
                    } else {
                        attack[k][j] = 1;
                        break;
                    }
                }
                for (int k = i + 1; k < 8; ++k) {
                    if (board[k][j] == '*') {
                        attack[k][j] = 1;
                    } else {
                        attack[k][j] = 1;
                        break;
                    }
                }
            attack[i][j] = 1;
            }
            if (board[i][j] == 'B') {
                for (int k = i - 1, l = j + 1; k >= 0 && l < 8; --k, ++l) {
                    if (board[k][l] == '*') {
                        attack[k][l] = 1;
                    } else {
                        break;
                    }
                }

                for (int k = i - 1, l = j - 1; k >= 0 && l >= 0; --k, --l) {
                    if (board[k][l] == '*') {
                        attack[k][l] = 1;
                    } else {
                        break;
                    }
                }

                for (int k = i + 1, l = j + 1; k < 8 && l < 8; ++k, ++l) {
                    if (board[k][l] == '*') {
                        attack[k][l] = 1;
                    } else {
                        break;
                    }
                }

                for (int k = i + 1, l = j - 1; k < 8 && l >= 0; ++k, --l) {
                    if (board[k][l] == '*') {
                        attack[k][l] = 1;
                    } else {
                        break;
                    }
                }
            attack[i][j] = 1;
            }
        }
    }
       for (int i = 0; i < 8;++i) {
        for(int j = 0;j < 8;++j) {
            if (attack[i][j] == 0) {
                ++count;
            }
        }
    }
    cout << count << endl;
    for (int i = 0; i < 8;++i) {
        for(int j = 0;j<8;++j) {
            cout << attack[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}
