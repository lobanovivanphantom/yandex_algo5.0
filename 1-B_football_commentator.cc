/*
Раунд плей-офф между двумя командами состоит из двух матчей. Каждая команда проводит по одному матчу «дома» и «в гостях». 
Выигрывает команда, забившая большее число мячей. Если же число забитых мячей совпадает, выигрывает команд, забившая больше мячей «в гостях». 
Если и это число мячей совпадает, матч переходит в дополнительный тайм или серию пенальти.

Вам дан счёт первого матча, а также счёт текущей игры (которая ещё не завершилась). 
Помогите комментатору сообщить, сколько голов необходимо забить первой команде, чтобы победить, не переводя игру в дополнительное время.

Формат ввода
В первой строке записан счёт первого мачта в формате G1:G2, где G1 "— число мячей, забитых первой командой, 
а G2 "— число мячей, забитых второй командой. Во второй строке записан счёт второго (текущего) матча в аналогичном формате. 
Все числа в записи счёта не превышают 5.

В третьей строке записано число 1, если первую игру первая команда провела «дома», или 2, если «в гостях».

Формат вывода
Выведите единственное целое число "— необходимое количество мячей.

Пример 1
Ввод	            Вывод
0:0                 1
0:0
1

Пример 2
Ввод	            Вывод
0:2                 5
0:3
1

Пример 3
Ввод	            Вывод
0:2                 6
0:3
2

*/


#include <iostream>

int main () {
    int g1_game1,g2_game1,g1_game2,g2_game2,is_home;
    char c;
    std::cin >> g1_game1 >> c >> g2_game1;
    std::cin >> g1_game2 >> c >> g2_game2;
    std::cin >> is_home;
    if ((g1_game1 + g1_game2 > g2_game1 + g2_game2) || 
    (g1_game1 + g1_game2 == g2_game1 + g2_game2 && is_home == 1 && g1_game2 > g2_game1) ||
    (g1_game1 + g1_game2 == g2_game1 + g2_game2 && is_home == 2 && g1_game1 > g2_game2)) {
        std::cout << 0 << std::endl;
    }
    else if ((is_home == 1 && g1_game2 + (g2_game1 + g2_game2) - (g1_game1 + g1_game2) > g2_game1) || (is_home == 2 && g1_game1 > g2_game2)) {
        std::cout << (g2_game1 + g2_game2) - (g1_game1 + g1_game2) << std::endl;
    }
    else {
        std::cout << (g2_game1 + g2_game2) - (g1_game1 + g1_game2) + 1 << std::endl;
    }
    return 0;
}
