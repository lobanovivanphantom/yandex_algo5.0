/*
F. Колесо Фортуны
Ограничение времени 	1 секунда
Ограничение памяти 	64Mb
Ввод 	стандартный ввод или input.txt
Вывод 	стандартный вывод или output.txt

Развлекательный телеканал транслирует шоу «Колесо Фортуны». В процессе игры участники шоу крутят большое колесо, разделенное на сектора. В каждом секторе этого колеса записано число. После того как колесо останавливается, специальная стрелка указывает на один из секторов. Число в этом секторе определяет выигрыш игрока.

Юный участник шоу заметил, что колесо в процессе вращения замедляется из-за того, что стрелка задевает за выступы на колесе, находящиеся между секторами. Если колесо вращается с угловой скоростью v градусов в секунду, и стрелка, переходя из сектора X к следующему сектору, задевает за очередной выступ, то текущая угловая скорость движения колеса уменьшается на k градусов в секунду. При этом если v ≤ k, то колесо не может преодолеть препятствие и останавливается. Стрелка в этом случае будет указывать на сектор X.

Юный участник шоу собирается вращать колесо. Зная порядок секторов на колесе, он хочет заставить колесо вращаться с такой начальной скоростью, чтобы после остановки колеса стрелка указала на как можно большее число. Колесо можно вращать в любом направлении и придавать ему начальную угловую скорость от a до b градусов в секунду.

Требуется написать программу, которая по заданному расположению чисел в секторах, минимальной и максимальной начальной угловой скорости вращения колеса и величине замедления колеса при переходе через границу секторов вычисляет максимальный выигрыш.

Формат ввода

Первая строка входного файла содержит целое число n — количество секторов колеса (3 ≤ n ≤ 100).

Вторая строка входного файла содержит n положительных целых чисел, каждое из которых не превышает 1000 — числа, записанные в секторах колеса. Числа приведены в порядке следования секторов по часовой стрелке. Изначально стрелка указывает на первое число.

Третья строка содержит три целых числа: a, b и k (1 ≤ a ≤ b ≤ 109, 1 ≤ k ≤ 109).
Формат вывода

В выходном файле должно содержаться одно целое число — максимальный выигрыш.

Пример 1
Ввод
5
1 2 3 4 5
3 5 2
Вывод
5


Пример 2
Ввод
5
1 2 3 4 5
15 15 2
Вывод
4


Пример 3
Ввод
5
5 4 3 2 1
2 5 2
Вывод
5
*/


#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    int n, a, b, k;
    std::cin >> n;

    int max_value = 0;
    bool first_input = true;
    std::vector<int> values(n);

    for (int i = 0; i < n; ++i) {
        int value;
        std::cin >> value;
        if (first_input) {
            first_input = false;
            max_value = value;
        } else {
            max_value = std::max(value, max_value);
        }
        values[i] = value;
    }

    std::cin >> a >> b >> k;

    int start_offset = a / k;
    if (a <= k * start_offset) {
        --start_offset;
    }

    int finish_offset = b / k;
    if (b <= k * finish_offset) {
        --finish_offset;
    }

    if (finish_offset - start_offset >= n) {
        std::cout << max_value;
        return 0;
    }

    bool first_iteration = true;
    int start_position = start_offset % n;
    int steps = 0;

    while (steps < n) {
        int index = (start_position + steps) % n;

        int reverse_index = n - (start_position + steps);
        if (reverse_index < 0) {
            reverse_index += n;
        }
        reverse_index %= n;

        int value = values[index];
        int reverse_value = values[reverse_index];

        if (first_iteration) {
            max_value = std::max(value, reverse_value);
            first_iteration = false;
        } else {
            max_value = std::max(max_value, std::max(value, reverse_value));
        }
        ++steps;
        if (steps > finish_offset - start_offset) break;
    }

    std::cout << max_value;
    return 0;
}
